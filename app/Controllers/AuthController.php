<?php

namespace App\Controllers;

use App\Models\User;
use App\Services\Auth;
use Respect\Validation\Validator;
use Slim\Http\{Request, Response, StatusCode};

class AuthController extends Controller
{
    /**
     *  @api {post} /auth/login Attempt to log
     *  @apiName PostAuthLogin
     *  @apiGroup Auth
     *  @apiVersion 1.0.0
     *
     *  @apiParam {String} email Users email
     *  @apiParam {String} password Users password
     *
     *  @apiParamExample {json} Request-Example:
     *     {
     *       "auth_token": ""
     *       "email": "test@test.com"
     *       "password": "123456"
     *     }
     *
     *  @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *    {
     *        "token": TOKEN GENERATED BY JWT,
     *        "user": {
     *            "id": 6,
     *            "username": "aaaa",
     *            "email": "test@test.com",
     *            "first_name": "aaaaa",
     *            "last_name": "aaaaa",
     *            "created_at": "2019-01-16 09:18:26",
     *            "updated_at": "2019-01-16 09:18:26"
     *        }
     *    }
     *
     */
    public function login(Request $request, Response $response)
    {
        $userInfo = $request->getParams();

        $user = User::where('email', $userInfo['email'])->first();

        if (!$user) {
            return $response->withJson([
                'status' => 'error',
                'auth' => false,
                'message' => 'User does not exist'], StatusCode::HTTP_NOT_FOUND);
        }

        if (!Auth::checkPasswords($userInfo['password'], $user->password)) {
            return $response->withJson([
                'status' => 'error',
                'auth' => false],
                StatusCode::HTTP_UNAUTHORIZED);
        }

        $token = Auth::getToken($user);

        return $response->withJson(
            [
                "token" => $token,
                "user" => $user
            ],
            StatusCode::HTTP_OK
        );
    }

    /**
     *  @api {post} /auth/regirster Attempt to register
     *  @apiName RegisterAuthLogin
     *  @apiGroup Auth
     *  @apiVersion 1.0.0
     *
     *  @apiParam {String} email Users email
     *  @apiParam {String} password Users password
     *  @apiParam {String} first_name Users first name
     *  @apiParam {String} last_name Users last name
     *  @apiParam {String} username Users username
     *
     *  @apiParamExample {json} Request-Example:
     *     {
     *       "email": "test@test.com"
     *       "password": "123456"
     *       "first_name": "test"
     *       "last_name": "test"
     *       "username": "test"
     *     }
     *
     *  @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *    {
     *        "token": TOKEN GENERATED BY JWT,
     *        "user": {
     *            "id": 6,
     *            "username": "aaaa",
     *            "email": "test@test.com",
     *            "first_name": "aaaaa",
     *            "last_name": "aaaaa",
     *            "created_at": "2019-01-16 09:18:26",
     *            "updated_at": "2019-01-16 09:18:26"
     *        }
     *    }
     */
    public function register(Request $request, Response $response)
    {
        $validation = $this->validator->validate($request, [
            'email' => Validator::noWhitespace()->notEmpty()->email()->length(3, 100),
            'username' => Validator::notEmpty()->length(3, 30),
            'password' => Validator::noWhitespace()->notEmpty()->length(5, 100),
            'first_name' => Validator::notEmpty()->length(3, 30),
            'last_name' => Validator::notEmpty()->length(3, 30),
        ]);

        if ($validation->fail()) {
            $errors = $validation->getErrors();
            return $response->withJson(
                $errors,
                StatusCode::HTTP_BAD_REQUEST
            );
        };

        $userInfo = $request->getParams();

        if (User::where('email', $userInfo['email'])->first()) {
            return $response->withJson([
                'status' => 'error',
                'message' => 'The user with such email already exist'],
                StatusCode::HTTP_CONFLICT

            );
        }

        $user = User::create([
            'email' => $userInfo['email'],
            'username' => $userInfo['username'],
            'password' => password_hash($userInfo['password'], PASSWORD_BCRYPT),
            'first_name' => $userInfo['first_name'],
            'last_name' => $userInfo['last_name'],
        ]);

        $token = Auth::getToken($user);
        
        return $response->withJson(
            [
                "token" => $token,
                "user" => $user
            ],
            StatusCode::HTTP_OK
        );
    }
}
