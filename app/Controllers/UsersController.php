<?php

namespace App\Controllers;

use App\Models\User;
use Respect\Validation\Validator;
use Slim\Http\{Response, Request, StatusCode};

class UsersController extends Controller
{
    /**
     * @api {get} /users/ Get all Users
     * @apiName GetUserIndex
     * @apiGroup Users
     * @apiVersion 1.0.0
     *
     * @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *    {
     *        "users": [
     *            {
     *              "id": 2,
     *              "username": "phpunit",
     *              "email": "aaaaaa@aaaa.com",
     *              "first_name": "phpunit",
     *              "last_name": "phpunit",
     *              "created_at": "2019-01-16 09:49:07",
     *              "updated_at": "2019-01-16 09:49:07"
     *
     *            },
     *            {
     *              "id": 2,
     *              "username": "phpunit2",
     *              "email": "bbbb@bbbb.com",
     *              "first_name": "phpunit2",
     *              "last_name": "phpunit2",
     *              "created_at": "2019-01-16 09:56:16",
     *              "updated_at": "2019-01-16 09:56:16"
     *            }
     *        ]
     *    }
     *
     */
    public function index(Request $request, Response $response)
    {
        $users = User::all();

        return $response->withJson(['users' => $users], StatusCode::HTTP_OK);
    }

    /**
     * @api {get} /users/:id Show User
     * @apiName GetUserShow
     * @apiGroup Users
     * @apiVersion 1.0.0
     *
     * @apiParam {Number} id ID of a User
     *
     * @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *
     * @apiError (404) Not Found    The User with <code>id</code> was not found.
     */
    public function show(Request $request, Response $response, $args)
    {
        $user = User::find($args['id']);
        $loggedUserId = $request->getAttribute('token')['loggedUserId'];

        if (!$user) {
            return $response->withJson([
                'status' => 'error',
                'message' => 'User does not exist'],
                StatusCode::HTTP_NOT_FOUND
            );
        }

        if (intval($args['id']) !== $loggedUserId) {
            return $response->withJson([
                'status' => 'error',
                'message' => 'Permission Denied'],
                StatusCode::HTTP_FORBIDDEN
            );
        }

        return $response->withJson([
            'user' => $user,
        ],
            StatusCode::HTTP_OK
        );
    }

    /**
     * @api {delete} /users/:id Delete User
     * @apiName DeleteUserDestroy
     * @apiGroup Users
     * @apiVersion 1.0.0
     *
     * @apiParam {Number} id ID of a User
     *
     * @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *       {
     *          "message": "User has been deleted"
     *       }
     *
     * @apiError NotFound     The User with <code>id</code> was not found.
     * @apiError Forbidden    Users can delete only themselfs
     * @apiError BadRequest
     */

    public function delete(Request $request, Response $response, $args)
    {
        $user = User::find($args['id']);
        $loggedUserId = $request->getAttribute('token')['loggedUserId'];

        if (!$user) {
            return $response->withJson([
                'status' => 'error',
                'message' => 'User does not exist'],
                StatusCode::HTTP_NOT_FOUND
            );
        }

        if (intval($args['id']) !== $loggedUserId) {
            return $response->withJson([
                'status' => 'error',
                'message' => 'Permission Denied'],
                StatusCode::HTTP_FORBIDDEN
            );
        }

        $user->delete();

        return $response->withJson([
            'message' => 'User has been deleted'],
            StatusCode::HTTP_OK
        );
    }

    /**
     * @api {put} /users/:id Update User
     * @apiName PutUserUpdate
     * @apiGroup Users
     * @apiVersion 1.0.0
     *
     * @apiParam {String} username
     * @apiParam {String} first_name
     * @apiParam {String} last_name
     * @apiParam {String} email
     *
     * @apiParamExample {json} Request-Example:
     *   {
     *    "first_name": "testUpdated",
     *    "last_name": "testUpdated",
     *    "email": "test123@updated.com",
     *   }
     *
     * @apiSuccessExample Success-Response:
     *     HTTP/1.1 200 OK
     *    {
     *        "auth": true,
     *        "token": TOKEN GENERATED BY JWT,
     *        "user": {
     *            "id": 6,
     *            "username": "aaaa",
     *            "email" : "test123@updated.com",
     *            "first_name": "testUpdated",
     *            "last_name": "testUpdated",
     *            "updated_at": "2018-11-27T11:57:02.003Z",
     *            "created_at": "2018-11-27T11:57:02.003Z"
     *        }
     *    }
     *
     *
     * @apiError NotFound     The User with <code>id</code> was not found.
     * @apiError Forbidden    Users can delete only themselfs
     * @apiError BadRequest
     *
     */
    public function update(Request $request, Response $response, $args)
    {
        $validation = $this->validator->validate($request, [
            'email' => Validator::optional(Validator::noWhitespace()->notEmpty()->email()->length(3, 100)),
            'username' => Validator::optional(Validator::notEmpty()->length(3, 30)),
            'first_name' => Validator::optional(Validator::notEmpty()->length(3, 30)),
            'last_name' => Validator::optional(Validator::notEmpty()->length(3, 30)),
        ]);

        if ($validation->fail()) {
            $errors = $validation->getErrors();
            return $response->withJson(
                $errors,
                StatusCode::HTTP_BAD_REQUEST
            );
        };

        $user = User::find($args['id']);
        $loggedUserId = $request->getAttribute('token')['loggedUserId'];

        if (!$user) {
            return $response->withJson([
                'status' => 'error',
                'message' => 'User does not exist'],
                StatusCode::HTTP_NOT_FOUND
            );
        }

        if (intval($args['id']) !== $loggedUserId) {
            return $response->withJson([
                'status' => 'error',
                'message' => 'Permission Denied'],
                StatusCode::HTTP_FORBIDDEN
            );
        }

        $fieldsToUpdate = $request->getParams(['email', 'username', 'first_name', 'last_name']);
        $user->update($fieldsToUpdate);

        return $response->withJson([
            'user' => $user,
        ],
            StatusCode::HTTP_OK
        );
    }
}
